diff -u -r boost_1_70_0.orig/boost/asio/detail/config.hpp boost_1_70_0/boost/asio/detail/config.hpp
--- boost_1_70_0.orig/boost/asio/detail/config.hpp	2019-04-09 21:35:20.000000000 +0200
+++ boost_1_70_0/boost/asio/detail/config.hpp	2019-05-10 14:34:53.000000000 +0200
@@ -825,7 +825,11 @@
 #    if (_LIBCPP_VERSION < 7000)
 #     if (__cplusplus >= 201402)
 #      if __has_include(<experimental/string_view>)
-#       define BOOST_ASIO_HAS_STD_EXPERIMENTAL_STRING_VIEW 1
+#     if __clang_major__ >= 7
+#      undef BOOST_ASIO_HAS_STD_EXPERIMENTAL_STRING_VIEW
+#     else
+#      define BOOST_ASIO_HAS_STD_EXPERIMENTAL_STRING_VIEW 1
+#     endif // __clang_major__ >= 7
 #      endif // __has_include(<experimental/string_view>)
 #     endif // (__cplusplus >= 201402)
 #    endif // (_LIBCPP_VERSION < 7000)
diff -u -r boost_1_70_0.orig/boost/config/user.hpp boost_1_70_0/boost/config/user.hpp
--- boost_1_70_0.orig/boost/config/user.hpp	2019-04-09 21:35:26.000000000 +0200
+++ boost_1_70_0/boost/config/user.hpp	2019-05-10 14:36:21.000000000 +0200
@@ -13,6 +13,12 @@
 //  configuration policy:
 //
 
+// Android defines
+// There is problem with std::atomic on android (and some other platforms).
+// See this link for more info:
+// https://code.google.com/p/android/issues/detail?id=42735#makechanges
+#define BOOST_ASIO_DISABLE_STD_ATOMIC 1
+
 // define this to locate a compiler config file:
 // #define BOOST_COMPILER_CONFIG <myheader>
 
diff -u -r boost_1_70_0.orig/boost/system/error_code.hpp boost_1_70_0/boost/system/error_code.hpp
--- boost_1_70_0.orig/boost/system/error_code.hpp	2019-04-09 21:36:35.000000000 +0200
+++ boost_1_70_0/boost/system/error_code.hpp	2019-05-10 14:36:59.000000000 +0200
@@ -14,6 +14,7 @@
 #include <boost/system/detail/config.hpp>
 #include <boost/cstdint.hpp>
 #include <boost/config.hpp>
+#include <stdio.h>
 #include <ostream>
 #include <string>
 #include <functional>
diff -u -r boost_1_70_0.orig/libs/filesystem/src/operations.cpp boost_1_70_0/libs/filesystem/src/operations.cpp
--- boost_1_70_0.orig/libs/filesystem/src/operations.cpp	2019-04-09 21:35:35.000000000 +0200
+++ boost_1_70_0/libs/filesystem/src/operations.cpp	2019-05-10 14:38:21.000000000 +0200
@@ -236,6 +236,21 @@
 
 # if defined(BOOST_POSIX_API)
 
+#  if defined(__ANDROID__)
+#  define truncate libboost_truncate_wrapper
+// truncate() is present in Android libc only starting from ABI 21, so here's a simple wrapper
+static int libboost_truncate_wrapper(const char *path, off_t length)
+{
+  int fd = open(path, O_WRONLY);
+  if (fd == -1) {
+    return -1;
+  }
+  int status = ftruncate(fd, length);
+  close(fd);
+  return status;
+}
+#  endif
+
 typedef int err_t;
 
 //  POSIX uses a 0 return to indicate success
diff -u -r boost_1_70_0.orig/tools/build/src/tools/common.jam boost_1_70_0/tools/build/src/tools/common.jam
--- boost_1_70_0.orig/tools/build/src/tools/common.jam	2019-04-09 21:36:57.000000000 +0200
+++ boost_1_70_0/tools/build/src/tools/common.jam	2019-05-10 14:40:06.000000000 +0200
@@ -980,10 +980,10 @@
     }
 
     # Ditto, from Clang 4
-    if ( $(tag) = clang || $(tag) = clangw ) && [ numbers.less 3 $(version[1]) ]
-    {
-        version = $(version[1]) ;
-    }
+    #if ( $(tag) = clang || $(tag) = clangw ) && [ numbers.less 3 $(version[1]) ]
+    #{
+    #    version = $(version[1]) ;
+    #}
 
     # On intel, version is not added, because it does not matter and it is the
     # version of vc used as backend that matters. Ideally, we should encode the
diff -Naur a/boost/beast/websocket/impl/ping.hpp b/boost/beast/websocket/impl/ping.hpp
--- a/boost/beast/websocket/impl/ping.hpp	2019-05-06 22:01:43.435117251 -0400
+++ b/boost/beast/websocket/impl/ping.hpp	2019-05-06 22:02:37.949433556 -0400
@@ -176,7 +176,8 @@
                 impl.op_idle_ping.emplace(std::move(*this));
                 impl.wr_block.lock(this);
                 BOOST_ASIO_CORO_YIELD
-                net::post(this->get(), std::move(*this));
+                net::post(
+                    this->get_executor(), std::move(*this));
                 BOOST_ASSERT(impl.wr_block.is_locked(this));
             }
             if(impl.check_stop_now(ec))
diff -Naur a/libs/beast/CHANGELOG.md b/libs/beast/CHANGELOG.md
--- a/libs/beast/CHANGELOG.md	2019-05-06 22:02:54.332528615 -0400
+++ b/libs/beast/CHANGELOG.md	2019-05-06 22:03:05.896595711 -0400
@@ -1,3 +1,10 @@
+Version 248-hf1:
+
+* Add idle ping suspend test
+* Fix moved-from executor in idle ping timeout
+
+--------------------------------------------------------------------------------
+
 Version 248:
 
 * Don't use a moved-from handler
diff -Naur a/libs/beast/test/beast/websocket/ping.cpp b/libs/beast/test/beast/websocket/ping.cpp
--- a/libs/beast/test/beast/websocket/ping.cpp	2019-05-06 22:02:54.342528673 -0400
+++ b/libs/beast/test/beast/websocket/ping.cpp	2019-05-06 22:03:05.908595781 -0400
@@ -10,8 +10,11 @@
 // Test that header file is self-contained.
 #include <boost/beast/websocket/stream.hpp>
 
+#include <boost/beast/_experimental/test/tcp.hpp>
+
 #include "test.hpp"
 
+#include <boost/asio/ip/tcp.hpp>
 #include <boost/asio/io_context.hpp>
 #include <boost/asio/strand.hpp>
 
@@ -366,6 +369,46 @@
             BEAST_EXPECT(count == 3);
         });
 
+        // suspend idle ping
+        {
+            using socket_type =
+                net::basic_stream_socket<
+                    net::ip::tcp,
+                    net::executor>;
+            net::io_context ioc;
+            stream<socket_type> ws1(ioc);
+            stream<socket_type> ws2(ioc);
+            ws1.set_option(stream_base::timeout{
+                stream_base::none(),
+                std::chrono::seconds(0),
+                true});
+            test::connect(
+                ws1.next_layer(),
+                ws2.next_layer());
+            ws1.async_handshake("localhost", "/",
+                [](error_code){});
+            ws2.async_accept([](error_code){});
+            ioc.run();
+            ioc.restart();
+            flat_buffer b1;
+            auto mb = b1.prepare(65536);
+            std::memset(mb.data(), 0, mb.size());
+            b1.commit(65536);
+            ws1.async_write(b1.data(),
+                [&](error_code, std::size_t){});
+            BEAST_EXPECT(
+                ws1.impl_->wr_block.is_locked());
+            ws1.async_read_some(net::mutable_buffer{},
+                [&](error_code, std::size_t){});
+            ioc.run();
+            ioc.restart();
+            flat_buffer b2;
+            ws2.async_read(b2,
+                [&](error_code, std::size_t){});
+            ioc.run();
+        }
+        //);
+
         {
             echo_server es{log, kind::async};
             net::io_context ioc;
